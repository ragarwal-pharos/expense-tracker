import{a as l,b as p,c as x,d,e as S,f as b,g as m,h as w,i as v,j as I,k as D,l as U,m as R}from"./chunk-IX24VT3U.js";import{Gc as P,O as C,S as j,T as $,a as u,b as h,c as f,d as c,k as y}from"./chunk-HYY45DGL.js";var F=class E{constructor(e){this.authService=e;this.authService.currentUser$.subscribe(t=>{t?this.expensesSubject.value.length>0||this.categoriesSubject.value.length>0?this.setupRealTimeListeners():this.loadData():(this.cleanupListeners(),this.expensesSubject.next([]),this.categoriesSubject.next([]),this.userSettingsSubject.next({}))})}firestore=$(R);expensesSubject=new y([]);categoriesSubject=new y([]);userSettingsSubject=new y({});loadingSubject=new y(!1);expensesUnsubscribe;categoriesUnsubscribe;expenses$=this.expensesSubject.asObservable();categories$=this.categoriesSubject.asObservable();userSettings$=this.userSettingsSubject.asObservable();loading$=this.loadingSubject.asObservable();loadData(){return c(this,null,function*(){this.loadingSubject.next(!0);try{yield Promise.all([this.loadExpenses(),this.loadCategories(),this.loadUserSettings()]),this.setupRealTimeListeners()}finally{this.loadingSubject.next(!1)}})}setupRealTimeListeners(){let e=this.authService.getCurrentUserId();if(!e)return;this.cleanupListeners();let t=l(this.firestore,"expenses"),s=x(t,d("userId","==",e),S("date","desc"));this.expensesUnsubscribe=U(s,n=>{let i=[];n.forEach(a=>{i.push(u({id:a.id},a.data()))}),this.expensesSubject.next(i),console.log(`Real-time update: ${i.length} expenses`)});let r=l(this.firestore,"categories"),o=x(r,d("userId","==",e));this.categoriesUnsubscribe=U(o,n=>{let i=[];n.forEach(a=>{i.push(u({id:a.id},a.data()))}),this.categoriesSubject.next(i),console.log(`Real-time update: ${i.length} categories`)})}cleanupListeners(){this.expensesUnsubscribe&&(this.expensesUnsubscribe(),this.expensesUnsubscribe=void 0),this.categoriesUnsubscribe&&(this.categoriesUnsubscribe(),this.categoriesUnsubscribe=void 0)}loadExpenses(){return c(this,null,function*(){try{let e=this.authService.getCurrentUserId();if(!e)return this.expensesSubject.next([]),[];let t=l(this.firestore,"expenses"),s=x(t,d("userId","==",e),S("date","desc")),r=yield m(s),o=[];return r.forEach(n=>{o.push(u({id:n.id},n.data()))}),this.expensesSubject.next(o),o}catch(e){return console.error("Error loading expenses:",e),[]}})}addExpense(e){return c(this,null,function*(){try{let t=this.authService.getCurrentUserId();if(!t)throw new Error("User not authenticated");let s=l(this.firestore,"expenses"),r=h(u({},e),{userId:t,createdAt:new Date().toISOString()});return(yield D(s,r)).id}catch(t){throw console.error("Error adding expense:",t),t}})}updateExpense(e){return c(this,null,function*(){try{let r=this.authService.getCurrentUserId();if(!r)throw new Error("User not authenticated");console.log(`Attempting to update expense with ID: ${e.id}`);let o=p(this.firestore,"expenses",e.id);if((yield b(o)).exists()){let s=e,{id:i}=s,a=f(s,["id"]),g=h(u({},a),{userId:r});yield v(o,g),console.log(`Expense ${e.id} updated successfully`)}else{console.warn(`Document with ID ${e.id} does not exist in Firebase. This might be a local-only expense.`);let t=e,{id:i}=t,a=f(t,["id"]),g=h(u({},a),{userId:r});yield w(o,g),console.log(`Created new expense with ID: ${e.id}`)}}catch(r){throw console.error("Error updating expense:",r),r}})}deleteExpense(e){return c(this,null,function*(){try{console.log(`Attempting to delete expense with ID: ${e}`);let t=p(this.firestore,"expenses",e);yield I(t),console.log(`Expense ${e} deleted successfully`)}catch(t){if(console.error("Error deleting expense:",t),t instanceof Error&&t.message&&t.message.includes("does not exist")){console.warn("Document not found - likely a local-only expense");return}throw t}})}migrateLocalExpenses(e){return c(this,null,function*(){try{console.log("Starting migration of local expenses to Firebase...");for(let s of e){if(s.id&&s.id.length>20){console.log(`Expense ${s.id} already migrated, skipping...`);continue}let t=s,{id:r}=t,o=f(t,["id"]),n=yield this.addExpense(o);console.log(`Migrated expense from local ID ${r} to Firebase ID ${n}`)}console.log("Migration completed successfully")}catch(s){throw console.error("Error during migration:",s),s}})}isFirebaseId(e){return!!(e&&e.length>20)}loadCategories(){return c(this,null,function*(){try{let e=this.authService.getCurrentUserId();if(!e)return console.log("No user authenticated, returning empty categories"),this.categoriesSubject.next([]),[];let t=l(this.firestore,"categories"),s=x(t,d("userId","==",e)),r=yield m(s),o=[];return r.forEach(n=>{o.push(u({id:n.id},n.data()))}),this.categoriesSubject.next(o),o}catch(e){return console.error("Error loading categories:",e),[]}})}addCategory(e){return c(this,null,function*(){try{let t=this.authService.getCurrentUserId();if(!t)throw new Error("User not authenticated");let s=l(this.firestore,"categories"),r=h(u({},e),{userId:t});return(yield D(s,r)).id}catch(t){throw console.error("Error adding category:",t),t}})}updateCategory(e){return c(this,null,function*(){try{let r=this.authService.getCurrentUserId();if(!r)throw new Error("User not authenticated");console.log(`Attempting to update category with ID: ${e.id}`);let o=p(this.firestore,"categories",e.id);if((yield b(o)).exists()){let s=e,{id:i}=s,a=f(s,["id"]),g=h(u({},a),{userId:r});yield v(o,g),console.log(`Category ${e.id} updated successfully`)}else{console.warn(`Category with ID ${e.id} does not exist in Firebase. This might be a local-only category.`);let t=e,{id:i}=t,a=f(t,["id"]),g=h(u({},a),{userId:r});yield w(o,g),console.log(`Created new category with ID: ${e.id}`)}}catch(r){throw console.error("Error updating category:",r),r}})}deleteCategory(e){return c(this,null,function*(){try{console.log(`Attempting to delete category with ID: ${e} (length: ${e.length})`);let t=p(this.firestore,"categories",e),s=yield b(t);if(console.log(`Document exists: ${s.exists()}`),!s.exists()){console.warn(`Category with ID ${e} does not exist in Firebase. This might be a local-only category.`);return}console.log("Document found, proceeding with deletion..."),yield I(t),console.log(`Category ${e} deleted successfully`)}catch(t){if(console.error("Error deleting category:",t),t instanceof Error&&t.message.includes("does not exist")){console.warn("Category not found - likely a local-only category");return}throw t}})}loadUserSettings(){return c(this,null,function*(){try{let e=p(this.firestore,"userSettings","default"),t=yield b(e);if(t.exists()){let s=t.data();return this.userSettingsSubject.next(s),s}else{let s={budgetLimit:0,emergencyFund:0,vacationFund:0,theme:"light",currency:"\u20B9"};return yield this.saveUserSettings(s),s}}catch(e){return console.error("Error loading user settings:",e),{budgetLimit:0,emergencyFund:0,vacationFund:0,theme:"light",currency:"\u20B9"}}})}saveUserSettings(e){return c(this,null,function*(){try{let t=p(this.firestore,"userSettings","default");yield w(t,e,{merge:!0}),this.userSettingsSubject.next(e)}catch(t){throw console.error("Error saving user settings:",t),t}})}getExpensesByCategory(e){return c(this,null,function*(){try{let t=this.authService.getCurrentUserId();if(!t)return[];let s=l(this.firestore,"expenses"),r=x(s,d("userId","==",t),d("categoryId","==",e)),o=yield m(r),n=[];return o.forEach(i=>{n.push(u({id:i.id},i.data()))}),n}catch(t){return console.error("Error getting expenses by category:",t),[]}})}getExpensesByDateRange(e,t){return c(this,null,function*(){try{let s=this.authService.getCurrentUserId();if(!s)return[];let r=l(this.firestore,"expenses"),o=x(r,d("userId","==",s),d("date",">=",e),d("date","<=",t),S("date","desc")),n=yield m(o),i=[];return n.forEach(a=>{i.push(u({id:a.id},a.data()))}),i}catch(s){return console.error("Error getting expenses by date range:",s),[]}})}static \u0275fac=function(t){return new(t||E)(j(P))};static \u0275prov=C({token:E,factory:E.\u0275fac,providedIn:"root"})};export{F as a};
